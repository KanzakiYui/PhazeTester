{"version":3,"sources":["Utilities/Message/index.js","https.js","Components/Credential/Login/index.js","Components/Credential/Forgot/index.js","Components/Credential/Signup/index.js","Components/Credential/index.js"],"names":["Messagebox","element","this","props","open","document","activeElement","blur","boxClass","type","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","onTouchMove","event","stopPropagation","onMouseMove","content","onClick","close","buttonText","ReactDOM","createPortal","body","React","Component","__webpack_require__","d","__webpack_exports__","GetAPI","POSTAPI","CheckAuth","request_promise__WEBPACK_IMPORTED_MODULE_0__","request_promise__WEBPACK_IMPORTED_MODULE_0___default","n","API","url","requestPromise","method","json","withCredentials","Login","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","Submit","preventDefault","userElement","target","passElement","validity","valid","username","value","password","then","setState","message","login","catch","error","openMessage","statusCode","classList","add","userRef","createRef","passRef","state","showPassword","_this2","react_default","id","onSubmit","noValidate","htmlFor","ref","name","maxLength","placeholder","required","current","pattern","autoComplete","prevState","Message","Forgot","PreFormSubmit","success","emailElement","email","response","emailSent","codeElement","passConfirmElement","token","Refresh","emailRef","remove","codeRef","passConfirmRef","form","tokenPart","Fragment","spellCheck","defaultValue","disabled","onChange","Signup","promoElement","condifitonChecked","promo","Reset","OpenTerms","e","t","bind","file","window","default","getElementById","reset","elements","i","length","promoRef","code","Credential","FormIndexChanged","index","formIndex","Swipe","nodeName","toLowerCase","condition1","nodeType","condition2","condition3","test","undefined","settings","centerMode","centerPadding","initialSlide","dots","arrows","infinite","speed","slidesToShow","afterChange","onSwipe","lib_default","Components_Credential_Forgot","match","params","Credential_Login","history","push","Components_Credential_Signup"],"mappings":"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","file":"static/js/5.b71ca73a.chunk.js","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\n\r\nclass Messagebox extends React.Component{\r\n    render(){\r\n        let element = null\r\n        if(this.props.open){\r\n            document.activeElement.blur()\r\n            let boxClass = 'MessageScreen '+this.props.type\r\n            element =   <div className={boxClass} onTouchMove={(event)=>event.stopPropagation()} onMouseMove={(event)=>event.stopPropagation()}>\r\n                                    <div className='Content'>\r\n                                        {this.props.content}\r\n                                    </div>\r\n                                    <button className='button-2' onClick={this.props.close}>{this.props.buttonText}</button>\r\n                                </div>\r\n        }\r\n        return ReactDOM.createPortal(element, document.body)\r\n    }\r\n}\r\n\r\nexport default Messagebox\r\n","import requestPromise from 'request-promise'\r\n\r\nlet API = \"https://webstaging.phaze.io/api/\"\r\n// let API = \"https://www.webapp.phaze.io/api/\"\r\n\r\nexport function GetAPI(url){\r\n    return requestPromise({\r\n        method: 'GET',  \r\n        url: API+url,\r\n        json: true, \r\n        withCredentials: true\r\n    })\r\n}\r\n\r\nexport function POSTAPI(url, body){\r\n    return requestPromise({\r\n        method: 'POST',  \r\n        url: API+url, \r\n        body: body, \r\n        json: true, \r\n        withCredentials: true,\r\n    })\r\n}\r\n\r\nexport function CheckAuth(){\r\n    return requestPromise({\r\n        method: 'GET',  \r\n        url: API+'users/check_auth',\r\n        json: true, \r\n        withCredentials: true,\r\n    })\r\n}\r\n","import React from 'react'\r\nimport {POSTAPI} from '../../../https'\r\nimport Messagebox from '../../../Utilities/Message'\r\n\r\nclass Login extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.userRef = React.createRef()\r\n        this.passRef = React.createRef()\r\n        this.state={\r\n            showPassword: true,\r\n            openMessage: false,\r\n            message: null\r\n        }\r\n    }\r\n    Submit = (event)=>{\r\n        event.preventDefault()\r\n        let userElement = event.target['login-username']\r\n        let passElement = event.target['login-password']\r\n        if(!userElement.validity.valid){\r\n            userElement.classList.add('Checked')\r\n            this.setState({\r\n                openMessage: true,\r\n                message: 'need valid email'\r\n            })\r\n        }\r\n        else if(!passElement.validity.valid){\r\n            passElement.classList.add('Checked')\r\n            this.setState({\r\n                openMessage: true,\r\n                message: 'Password should be Alphanumeric only'\r\n            })\r\n        }\r\n        else{\r\n            let body = {\r\n                username: userElement.value,\r\n                password: passElement.value\r\n            }\r\n            POSTAPI('login', body).then(()=>{\r\n                this.setState({\r\n                    message: null\r\n                }, this.props.login)\r\n            }).catch(error=>this.setState({openMessage: true, message: error.statusCode === 401?'wrong credentiail':'Please Try Again'}))\r\n        }\r\n    }\r\n    render(){\r\n        return  <div id='Login'>\r\n                        <div className='Title'>\r\n                            <i className=\"fas fa-user-circle\"></i>\r\n                            <p>Log Into Account</p>\r\n                        </div>\r\n                        <form id='form-1' onSubmit={(event)=>this.Submit(event)} noValidate>\r\n                            <div className='Inline-Input'>\r\n                                <label htmlFor='login-username'><i className=\"fas fa-user-tie\"></i></label>\r\n                                <input ref={this.userRef} id='login-username' name='login-username' type='email' maxLength='24' placeholder='Your Email Address' required/>\r\n                                <span className='Symbol' onClick={()=>this.userRef.current.value=\"\"}>\r\n                                    <i className=\"fas fa-backspace\"></i>\r\n                                </span>\r\n                            </div>\r\n                            <div className='Inline-Input'>\r\n                                <label htmlFor='login-password'><i className=\"fas fa-key\"></i></label>\r\n                                <input ref={this.passRef} id='login-password' name='login-password' type={this.state.showPassword?'password':'text'} \r\n                                    maxLength='24' pattern='^[0-9A-z]+$' placeholder='Your Password' required autoComplete=\"on\"/>\r\n                                <span className='Symbol' onClick={()=>this.setState(prevState=>({showPassword: !prevState.showPassword}))}>\r\n                                    {this.state.showPassword?<i className=\"fas fa-eye-slash\"></i>:<i className=\"fas fa-eye\"></i>}\r\n                                </span>\r\n                            </div>  \r\n                        </form>\r\n                        <Messagebox open={this.state.openMessage} type='error' buttonText='Close' content={this.state.message} close={()=>this.setState({openMessage: false})} />\r\n                    </div>\r\n    }\r\n}\r\n\r\nexport default Login","import React from 'react'\r\nimport './index.css'\r\nimport {POSTAPI} from '../../../https'\r\nimport Messagebox from '../../../Utilities/Message'\r\n\r\nclass Forgot extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.emailRef = React.createRef()\r\n        this.codeRef = React.createRef()\r\n        this.passRef = React.createRef()\r\n        this.passConfirmRef = React.createRef()\r\n        this.state={\r\n            openMessage: false,\r\n            message: null,\r\n            emailSent: this.props.token?true:false,\r\n            showPassword: true,\r\n            success: false,\r\n        }\r\n    }\r\n    PreFormSubmit = (event)=>{\r\n        event.preventDefault()\r\n        if(this.state.success){                                                     // work around with a werid bug?\r\n            this.setState({ success: false })\r\n            return\r\n        }\r\n        let emailElement = event.target['forgot-email']\r\n        if(!emailElement.validity.valid){\r\n            emailElement.classList.add('Checked')\r\n            this.setState({\r\n                openMessage: true,\r\n                message: 'need valid email'\r\n            })\r\n        }\r\n        else{\r\n            let body={ email: emailElement.value }\r\n            POSTAPI('public/reset_password', body).then(response=>{\r\n                this.setState({\r\n                    emailSent: true\r\n                })\r\n            }).catch(error=>this.setState({openMessage: true, message: error.statusCode === 400?'User Does Not Exist':'Please Try Again'}))\r\n        }\r\n    }\r\n    Submit = (event)=>{\r\n        event.preventDefault()\r\n        let codeElement = event.target['forgot-code']\r\n        let passElement = event.target['forgot-password']\r\n        let passConfirmElement = event.target['forgot-passwordConfirm']\r\n        if(codeElement && !codeElement.validity.valid){\r\n            codeElement.classList.add('Checked')\r\n            this.setState({\r\n                openMessage: true,\r\n                message: 'code is required'\r\n            })\r\n        }\r\n        else if(!passElement.validity.valid || !passConfirmElement.validity.valid){\r\n            passElement.classList.add('Checked')\r\n            passConfirmElement.classList.add('Checked')\r\n            this.setState({\r\n                openMessage: true,\r\n                message: 'Two passwords should be identical and only alphanumeric is allowed. Minimum length is 8'\r\n            })\r\n        }\r\n        else{\r\n            let body={\r\n                token: codeElement?codeElement.value:this.props.token,\r\n                password: passElement.value\r\n            }\r\n            POSTAPI('public/reset_password_verify', body).then(()=>{\r\n                this.setState({\r\n                    emailSent: false,\r\n                    openMessage: true,\r\n                    success: true,\r\n                    message: 'Your Password is Reset'\r\n                })\r\n            }).catch(error=>this.setState({openMessage: true, message: error.statusCode === 400?'Code Invalid or Expired':'Please Try Again'}))\r\n        }\r\n    }\r\n\r\n    Refresh = ()=>{\r\n        this.setState({emailSent: false, showPassword: true},()=>this.emailRef.current.classList.remove('Checked'))\r\n    }\r\n    render(){\r\n        let form = null\r\n        let tokenPart = null\r\n        if(!this.props.token)\r\n            tokenPart = <React.Fragment>\r\n                                    <p className='Goback'>\r\n                                        <span onClick={()=>this.setState({emailSent: false})}>\r\n                                            <i className=\"fas fa-arrow-left\"></i> Go Back\r\n                                        </span>\r\n                                    </p>\r\n                                    <div className='Inline-Input'>\r\n                                        <label htmlFor='forgot-code'><i className=\"fas fa-barcode\"></i></label>\r\n                                        <input ref={this.codeRef} id='forgot-code' name='forgot-username' type='text' placeholder='Verification Code' required spellCheck=\"false\" defaultValue={this.props.token}/>\r\n                                        <span className='Symbol' onClick={()=>this.codeRef.current.value=\"\"}>\r\n                                            <i className=\"fas fa-backspace\"></i>\r\n                                        </span>\r\n                                    </div>\r\n                                </React.Fragment>\r\n        if(!this.state.emailSent)\r\n            form = <form id='pre-form' onSubmit={(event)=>this.PreFormSubmit(event)} noValidate>\r\n                            <div className='Inline-Input'>\r\n                                <label htmlFor='forgot-email'><i className=\"fas fa-envelope\"></i></label>\r\n                                <input ref={this.emailRef} id='forgot-email' name='forgot-email' type='email' maxLength='24' placeholder='Your Email Address' required/>\r\n                                <span className='Symbol' onClick={()=>this.emailRef.current.value=\"\"}>\r\n                                    <i className=\"fas fa-backspace\"></i>\r\n                                </span>\r\n                            </div>\r\n                            <button type='submit' className='button-1'>Send Email</button>\r\n                        </form>\r\n        else\r\n            form = <form id='form-0' onSubmit={(event)=>this.Submit(event)} noValidate disabled>\r\n                            {tokenPart}\r\n                            <div className='Inline-Input'>\r\n                                <label htmlFor='forgot-password'><i className=\"fas fa-key\"></i></label>\r\n                                <input ref={this.passRef} id='forgot-password' name='forgot-password' type={this.state.showPassword?'password':'text'} \r\n                                    maxLength='24' pattern='^[0-9A-z]{8,}$' placeholder='New Password' required autoComplete=\"on\"\r\n                                    onChange={(event)=>this.passConfirmRef.current.pattern=event.target.value}\r\n                                />\r\n                                <span className='Symbol' onClick={()=>this.setState(prevState=>({showPassword: !prevState.showPassword}))}>\r\n                                    {this.state.showPassword?<i className=\"fas fa-eye-slash\"></i>:<i className=\"fas fa-eye\"></i>}\r\n                                </span>\r\n                            </div>\r\n                            <div className='Inline-Input'>\r\n                                <label htmlFor='forgot-passwordConfirm'><i className=\"fas fa-key\"></i></label>\r\n                                <input ref={this.passConfirmRef} id='forgot-passwordConfirm' name='forgot-passwordConfirm' type={this.state.showPassword?'password':'text'} \r\n                                    maxLength='24' pattern='^[0-9A-z]{8,}$' placeholder='Confirm Password' required autoComplete=\"on\"\r\n                                    onChange={(event)=>this.passRef.current.pattern=event.target.value}\r\n                                />\r\n                                <span className='Symbol' onClick={()=>this.setState(prevState=>({showPassword: !prevState.showPassword}))}>\r\n                                    {this.state.showPassword?<i className=\"fas fa-eye-slash\"></i>:<i className=\"fas fa-eye\"></i>}\r\n                                </span>\r\n                            </div>\r\n                        </form>\r\n        return  <div id='Forgot'>\r\n                        <div className='Title'>\r\n                            <i className=\"fas fa-unlock-alt\"></i>\r\n                            <p>Restore Password</p>\r\n                        </div>\r\n                        {form}\r\n                        <Messagebox open={this.state.openMessage} type={this.state.success?'success':'error'} buttonText='Close' content={this.state.message} close={()=>this.setState({openMessage: false})} />\r\n                    </div>\r\n    }\r\n}\r\n\r\nexport default Forgot","import React from 'react'\r\nimport './index.css'\r\nimport {POSTAPI} from '../../../https'\r\nimport Messagebox from '../../../Utilities/Message'\r\n\r\nclass Signup extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.userRef = React.createRef()\r\n        this.passRef = React.createRef()\r\n        this.passConfirmRef = React.createRef()\r\n        this.promoRef = React.createRef()\r\n        this.state={\r\n            showPassword: true,\r\n            openMessage: false,\r\n            message: null,\r\n            success: false,\r\n            condifitonChecked: false,\r\n        }\r\n    }\r\n    Submit = (event)=>{\r\n        event.preventDefault()\r\n        let userElement = event.target['signup-username']\r\n        let passElement = event.target['signup-password']\r\n        let passConfirmElement = event.target['signup-passwordConfirm']\r\n        let promoElement = event.target['signup-promo']\r\n        if(!userElement.validity.valid){\r\n            userElement.classList.add('Checked')\r\n            this.setState({\r\n                openMessage: true,\r\n                message: 'need valid email'\r\n            })\r\n        }\r\n        else if(!passElement.validity.valid || !passConfirmElement.validity.valid){\r\n            passElement.classList.add('Checked')\r\n            passConfirmElement.classList.add('Checked')\r\n            this.setState({\r\n                openMessage: true,\r\n                message: 'Two passwords should be identical and only alphanumeric is allowed. Minimum length is 8'\r\n            })\r\n        }\r\n        else if(!promoElement.validity.valid){\r\n            promoElement.classList.add('Checked')\r\n            this.setState({\r\n                openMessage: true,\r\n                message: 'need promo code to signup'\r\n            })\r\n        }\r\n        else if(!this.state.condifitonChecked)\r\n            this.setState({\r\n                openMessage: true,\r\n                message: 'You must accept condition'\r\n            })\r\n        else{\r\n            let body={\r\n                username: userElement.value,\r\n                password: passElement.value,\r\n                promo: promoElement.value\r\n            }\r\n            POSTAPI('signup', body).then(()=>{\r\n                this.setState({\r\n                    openMessage: true,\r\n                    success: true,\r\n                    message: 'Your account is created with signup bonus\\nPlease click the link sent to your mailbox to active your account'\r\n                },this.Reset)\r\n            }).catch(error=>{\r\n                let message = 'Please Try Again'\r\n                if(error.statusCode === 403)\r\n                    message = 'This promo code is expired or invalid'\r\n                else if(error.statusCode === 400)\r\n                    message = 'This email is linked to an existing account'\r\n                this.setState({\r\n                    openMessage: true,\r\n                    message: message\r\n                })\r\n            })\r\n        }\r\n    }\r\n    OpenTerms = ()=>{\r\n        import('../../../Media/Files/Terms.pdf').then(file=>window.open(file.default, '_blank'))\r\n    }\r\n    Reset = ()=>{\r\n        let form = document.getElementById('form-2')\r\n        form.reset()\r\n        let elements = form.elements\r\n        for(let i=0; i<elements.length; i++)\r\n            elements[i].classList.remove('Checked')\r\n    }\r\n    render(){\r\n        return  <div id='Signup'>\r\n                        <div className='Title'>\r\n                            <i className=\"fas fa-user-plus\"></i>\r\n                            <p>Create New Account</p>\r\n                        </div>\r\n                        <form id='form-2' onSubmit={(event)=>this.Submit(event)} noValidate>\r\n                            <div className='Inline-Input'>\r\n                                <label htmlFor='signup-username'><i className=\"fas fa-envelope-square\"></i></label>\r\n                                <input ref={this.userRef} id='signup-username' name='signup-username' type='email' maxLength='24' placeholder='Your Email Address' required/>\r\n                                <span className='Symbol' onClick={()=>this.userRef.current.value=\"\"}>\r\n                                    <i className=\"fas fa-backspace\"></i>\r\n                                </span>\r\n                            </div>\r\n                            <div className='Inline-Input'>\r\n                                <label htmlFor='signup-password'><i className=\"fas fa-key\"></i></label>\r\n                                <input ref={this.passRef} id='signup-password' name='signup-password' type={this.state.showPassword?'password':'text'} \r\n                                    maxLength='24' pattern='^[0-9A-z]{8,}$' placeholder='Password' required autoComplete=\"on\"\r\n                                    onChange={(event)=>this.passConfirmRef.current.pattern=event.target.value}\r\n                                />\r\n                                <span className='Symbol' onClick={()=>this.setState(prevState=>({showPassword: !prevState.showPassword}))}>\r\n                                    {this.state.showPassword?<i className=\"fas fa-eye-slash\"></i>:<i className=\"fas fa-eye\"></i>}\r\n                                </span>\r\n                            </div>\r\n                            <div className='Inline-Input'>\r\n                                <label htmlFor='signup-passwordConfirm'><i className=\"fas fa-key\"></i></label>\r\n                                <input ref={this.passConfirmRef} id='signup-passwordConfirm' name='signup-passwordConfirm' type={this.state.showPassword?'password':'text'} \r\n                                    maxLength='24' pattern='^[0-9A-z]{8,}$' placeholder='Confirm Password' required autoComplete=\"on\"\r\n                                    onChange={(event)=>this.passRef.current.pattern=event.target.value}\r\n                                />\r\n                                <span className='Symbol' onClick={()=>this.setState(prevState=>({showPassword: !prevState.showPassword}))}>\r\n                                    {this.state.showPassword?<i className=\"fas fa-eye-slash\"></i>:<i className=\"fas fa-eye\"></i>}\r\n                                </span>\r\n                            </div>\r\n                            <div className='Inline-Input'>\r\n                                <label htmlFor='signup-promo'><i className=\"fas fa-gift\"></i></label>\r\n                                <input ref={this.promoRef} id='signup-promo' name='signup-promo' type='text' maxLength='14' pattern='^[0-9A-z]+$' placeholder='Promo Code' required defaultValue={this.props.code} spellCheck='false'/>\r\n                                <span className='Symbol' onClick={()=>this.promoRef.current.value=\"\"}>\r\n                                    <i className=\"fas fa-backspace\"></i>\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"CheckCondition\">\r\n                                <input id=\"ConditionCheck\" type=\"checkbox\" onChange={()=>this.setState(prevState=>({condifitonChecked: !prevState.condifitonChecked}))} />\r\n                                <label htmlFor=\"ConditionCheck\">\r\n                                    <span></span>\r\n                                </label>\r\n                                <span>I accept the <i onClick={this.OpenTerms}>Terms & Condition</i></span>\r\n                            </div>\r\n                        </form>\r\n                        <Messagebox open={this.state.openMessage} type={this.state.success?'success':'error'} buttonText='Close' content={this.state.message} close={()=>this.setState({openMessage: false})} />\r\n                    </div>\r\n    }\r\n}\r\n\r\nexport default Signup","import React from 'react'\r\nimport './index.css'\r\nimport Slider from \"react-slick\"\r\nimport Login from './Login'\r\nimport Forgot from './Forgot'\r\nimport Signup from './Signup'\r\n\r\nclass Credential extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            formIndex: this.props.formIndex!==undefined?this.props.formIndex:1                                           \r\n            //  0 means left (forgot), 1 means middle (login), 2 means right (signup)\r\n        }\r\n    }\r\n    FormIndexChanged = (index)=>{\r\n        this.setState({\r\n            formIndex: index\r\n        })\r\n    }\r\n    Swipe = ()=>{                                                                                   // When swipe, blur actived element (especially for mobile keyboard)\r\n        let element = document.activeElement\r\n        let nodeName = element.nodeName.toLowerCase()\r\n        let condition1 = element.nodeType === 1\r\n        let condition2 = nodeName === \"textarea\"\r\n        let condition3 = nodeName === \"input\" && /^(?:text|email|number|search|tel|url|password)$/i.test(element.type)\r\n        if(condition1 && (condition2 || condition3))\r\n            element.blur()\r\n    }\r\n    render(){\r\n        let settings = {\r\n            centerMode: true,\r\n            centerPadding: \"10%\",\r\n            initialSlide: this.state.formIndex,\r\n            dots: false,\r\n            arrows: false,\r\n            infinite: false,\r\n            speed: 500,\r\n            slidesToShow: 1,\r\n            afterChange: this.FormIndexChanged,\r\n            onSwipe: this.Swipe\r\n        }\r\n        return  <div id='Credential'>\r\n                        <Slider {...settings}>\r\n                            <div className='FormSnippet Form-1'>\r\n                                <Forgot token={this.props.match.params.token}/>\r\n                                <span className='Arrow'></span>\r\n                            </div>\r\n                            <div className='FormSnippet Form-2'>\r\n                                <Login login={()=>this.props.history.push('/dashboard')}/>\r\n                                <span className='Arrow'></span>\r\n                            </div>\r\n                            <div className='FormSnippet Form-3'>\r\n                                <Signup code={this.props.match.params.code}/>\r\n                                <span className='Arrow'></span>\r\n                            </div>\r\n                        </Slider>\r\n                        <button type='submit' form={'form-'+this.state.formIndex} className='button-1 Confirm'>Confirm</button>\r\n                    </div>\r\n    }\r\n}\r\n\r\nexport default Credential"],"sourceRoot":""}